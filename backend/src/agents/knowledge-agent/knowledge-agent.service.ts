import { Injectable } from '@nestjs/common';
import { RedisLoggerService } from 'src/redis/redis-logger/redis-logger.service';
import { GroqService } from '../groq/groq.service';
import { loadDynamicContext, ArticleContext } from './context-loader';

/* TODO
 ### 2.2. üìö KnowledgeAgent
 - Uses **RAG (Retrieval-Augmented Generation)** based on content from:
   - [https://ajuda.infinitepay.io/pt-BR/](https://ajuda.infinitepay.io/pt-BR/)
 - May use **LangChain**, **LlamaIndex**, or similar.
 - Must log:
   - Source of the answer
   - Execution time
*/

@Injectable()
export class KnowledgeAgentService {
  constructor(
    private logger: RedisLoggerService,
    private readonly groq: GroqService
  ) {}

  async answer(question: string, context?: ArticleContext[]) {
    const start = Date.now();
    // Carrega contexto dos artigos relevantes se n√£o fornecido
    const limitedContext = (
      (context && context.length > 0) 
      ? context 
      : await loadDynamicContext(question)
    )
    .slice(0, 3);


    // const contextText = limitedContext.map(a => {
    //   return `T√≠tulo: ${a.title}\nLink: ${a.url}\nTrecho: ${a.text.slice(0, 500)}`
    // }).join('\n\n');

    const contextText = limitedContext.map(
      (a, i) => `Artigo ${i + 1}: ${a.title}\nURL: ${a.url}\n${a.text}\n`
    ).join('\n');
    
    const mainLink = limitedContext.length > 0 ? limitedContext[0].url : '';

    const prompt = `
      Responda √† pergunta do usu√°rio usando os artigos abaixo.
      Sempre inclua pelo menos um link relevante na resposta.
      Pergunta: "${question}"

      Artigos:
      ${contextText}
    `;

    // const prompt = `Voc√™ √© um assistente que responde perguntas com base apenas no conte√∫do fornecido.
    //   \nResponda de forma objetiva e curta. Se n√£o souber a resposta exata, cite explicitamente o link mais relevante para consulta: ${mainLink}
    //   \n\nConte√∫do dispon√≠vel:
    //   \n${contextText}
    //   \n\nPergunta: ${question}
    // `;

    console.log('KnowledgeAgentService - answer:');

    // TODO. remover?. teste tempor√°rio
    if(!limitedContext.length) {
      console.warn('KnowledgeAgentService - No context available, loading dynamic context...');
      return { answer: 'Content not found', mainLink: ''}
    }

    // Calls LLM to generate answer
    const answer = await this.groq.chatCompletion({prompt});

    const executionTimeMs = Date.now() - start;
    await this.logger.log('knowledge-agent', {
      question,
      sources: limitedContext.map(a => a.url),
      executionTimeMs,
    });
    
    console.log({ answer, mainLink })

    let finalResponse = answer ?? 'Text generated by the specialized agent.';
    // Se o LLM n√£o citar o link, inclua manualmente
    if (mainLink && !finalResponse.includes(mainLink)) {
        finalResponse += `\n\nVeja mais detalhes neste artigo: ${mainLink}`;
    }

    return { answer: finalResponse, mainLink };
  }
}