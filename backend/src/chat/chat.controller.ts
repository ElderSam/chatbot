import { Controller, Post, UsePipes, ValidationPipe, Body } from '@nestjs/common';
import { ChatDto } from './dto/chat.dto';
import { SanitizePipe } from './pipes/sanitize.pipe';
import { RouterAgentService } from '../agents/router-agent/router-agent.service';

@Controller('chat')
export class ChatController {
    constructor(
        private readonly routerAgent: RouterAgentService,
    ) {}

    @Post()
    @UsePipes(new ValidationPipe({ whitelist: true, forbidNonWhitelisted: true }), SanitizePipe)
    async handleChat(@Body() payload: ChatDto) {

        try {
            // Delegate routing decision to RouterAgent
            const chosenAgent = await this.routerAgent.route(payload.message);
            const result = 'Not implemented yet';

            return {
                response: payload.message, // Replace with actual agent response
                source_agent_response: result ?? 'Text generated by the specialized agent.',
                agent_workflow: [
                    { agent: 'RouterAgent', decision: chosenAgent },
                    { agent: chosenAgent }
                ]
            };
        } catch (error: any) {
            // Retorna erro ao usu√°rio
            return {
                statusCode: error.statusCode || 500,
                error: error.message || 'Agent routing failed',
                details: error.response?.data || error.stack || null,
            };
        }
    }
}
