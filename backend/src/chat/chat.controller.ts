import { Controller, Post, UsePipes, ValidationPipe, Body } from '@nestjs/common';
import { ChatDto } from './dto/chat.dto';
import { SanitizePipe } from './pipes/sanitize.pipe';
import { RouterAgentService } from '../agents/router-agent/router-agent.service';

@Controller('chat')
export class ChatController {
    constructor(
        private readonly routerAgent: RouterAgentService,
    ) {}

    @Post()
    @UsePipes(new ValidationPipe({ whitelist: true, forbidNonWhitelisted: true }), SanitizePipe)
    async handleChat(@Body() payload: ChatDto) {

        // Delegate routing decision to RouterAgent
        const { result, agent: chosenAgent } = await this.routerAgent.route(payload.message);

        // Example: you can use chosenAgent to decide which agent to call next
        // For now, just return the routing decision
        return {
            response: payload.message, // Replace with actual agent response
            source_agent_response: result ?? 'Text generated by the specialized agent.',
            agent_workflow: [
                { agent: 'RouterAgent', decision: chosenAgent },
                { agent: chosenAgent }
            ]
        };
    }
}
